{
	"C++ Base Template": {
		"prefix": "base",
		"body": [
			"#include <iostream>",
			"using namespace std;",
			"",
			"int main(){",
				"   $0",
				"   return 0;",
			"}"
		],
		"description": "base"
	},
	
	"base template with test": {
		"prefix": "mbase",
		"body": [
			"#include <iostream>",
			"using namespace std;",
			"",
			"/*",
			"    @brief",
			"*/",
			"",
			"void test01(){",
			"",
			"}",
			"",
			"int main(){",
				"        test01();",
				"        return 0;",
			"}"
		],
		"description": "base"
	},

	"endl with sep": {
		"prefix": "ed",
		"body": [
			"<< std::endl;"
		],
		"description": "endl"
	},

	"start cout": {
		"prefix": "sc",
		"body": [
			"std::cout << "
		],
		"description": "cout"
	},

	"start std": {
		"prefix": "/ss",
		"body": [
			"std::"
		],
		"description": "start std"
	},
	"string": {
		"prefix": "/str",
		"body": [
			"std::string"
		],
		"description": "start std"
	},
	"include": {
		"prefix": "ppii",
		"body": [
			"#include \"\""
		],
		"description": "include"
	},

	"if": {
		"prefix": "fff",
		"body": [
			"if($0){",
			"",
			"}"
		],
		"description": "if"
	},
	"ifelse": {
		"prefix": "ffe",
		"body": [
			"if($0){",
			"",
			"}else{",
			"",
			"}"
		],
		"description": "ifelse"
	},
	"ifeifse": {
		"prefix": "ffle",
		"body": [
			"if($0){",
			"",
			"}else if(){",
			"",
			"}else{",
			"",
			"}"
		],
		"description": "ifeifse"
	},
	"xiaokh": {
		"prefix": "/a",
		"body": [
			"()"
		],
		"description": "xiaokh"
	},

	"xiaokh2": {
		"prefix": "/b",
		"body": [
			"($0)"
		],
		"description": "xiaokh2"
	},

	"jiantou": {
		"prefix": "/c",
		"body": [
			"->"
		],
		"description": "jiantou"
	},

	"zuoyi": {
		"prefix": "/d",
		"body": [
			" << "
		],
		"description": "zuoyi"
	},

	"jiankh": {
		"prefix": "/e",
		"body": [
			"<$0>"
		],
		"description": "jiankh"
	},

	"syinhao": {
		"prefix": "/f",
		"body": [
			"\"$0\""
		],
		"description": "syinhao"
	},

	"dakh": {
		"prefix": "/g",
		"body": [
			"{",
			"    $0",
			"}",
			""
		],
		"description": "dakh"
	},
	"zhongkh": {
		"prefix": "/h",
		"body": [
			"[$0]"
		],
		"description": "zhongkh"
	},
	"equal": {
		"prefix": "/i",
		"body": [
			" = "
		],
		"description": "equal"
	},
	"maohaos": {
		"prefix": "/j",
		"body": [
			"::",
		],
		"description": "maohaos"
	},
	"xinhao": {
		"prefix": "/k",
		"body": [
			"*",
		],
		"description": "xinhao"
	},
	"qudizhi": {
		"prefix": "/l",
		"body": [
			"&",
		],
		"description": "qudizhi"
	},
	"mxiahx": {
		"prefix": "/m",
		"body": [
			"m_",
		],
		"description": "mxiahx"
	},
	"equals": {
		"prefix": "/n",
		"body": [
			" == ",
		],
		"description": "equals"
	},
	"xiahx": {
		"prefix": "/o",
		"body": [
			"_",
		],
		"description": "xiahx"
	},
	"ganth": {
		"prefix": "/p",
		"body": [
			"!",
		],
		"description": "ganth"
	},
	"binqie": {
		"prefix": "/q",
		"body": [
			" && ",
		],
		"description": "binqie"
	},
	"huoze": {
		"prefix": "/r",
		"body": [
			" || ",
		],
		"description": "huoze"
	},
	"cldkh": {
		"prefix": "/s",
		"body": [
			"{ $0 }",
		],
		"description": "cldkh"
	},
	"budy": {
		"prefix": "/t",
		"body": [
			" != ",
		],
		"description": "budy"
	},
	"info": {
		"prefix": "/info",
		"body": [
			"SYLAR_LOG_INFO(g_logger) << "
		],
		"description": "info"
	},
	"error": {
		"prefix": "/error",
		"body": [
			"SYLAR_LOG_INFO(g_logger) << "
		],
		"description": "error"
	},
	"warn": {
		"prefix": "/warn",
		"body": [
			"SYLAR_LOG_WARN(g_logger) << "
		],
		"description": "warn"
	},
	"debug": {
		"prefix": "/debug",
		"body": [
			"SYLAR_LOG_DEBUG(g_logger) << "
		],
		"description": "debug"
	},
	"root": {
		"prefix": "/root",
		"body": [
			"static sylar::Logger::ptr g_logger = SYLAR_LOG_ROOT();"
		],
		"description": "root"
	},
	"system": {
		"prefix": "/system",
		"body": [
			"static sylar::Logger::ptr g_logger = SYLAR_LOG_NAME(\"system\");"
		],
		"description": "system"
	},
	"ptr": {
		"prefix": "/ptr",
		"body": [
			"typedef std::shared_ptr<$0> ptr;"
		],
		"description": "ptr"
	},
	"public": {
		"prefix": "/pb",
		"body": [
			"public"
		],
		"description": "pubic"
	},
	"protected": {
		"prefix": "/po",
		"body": [
			"protected:"
		],
		"description": "protected"
	},
	"private": {
		"prefix": "/pr",
		"body": [
			"private:"
		],
		"description": "private"
	},
	"return_true": {
		"prefix": "/rt",
		"body": [
			"return true;"
		],
		"description": "return_true"
	},
	"return_false": {
		"prefix": "/rf",
		"body": [
			"return false;"
		],
		"description": "return_false"
	},
	"new class": {
		"prefix": "/cl",
		"body": [
			"class $0{",
			"public:",
			"",
			"private:",
			"",
			"};"
		],
		"description": "new class"
	},
}
